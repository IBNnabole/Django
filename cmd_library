to run server:
python3 manage.py runsever
/////////////////////////////
to create app:
python3 manage.py startapp priject_name
//////////////////////////////////
to start:
django-admin startproject myproject
////////////////////////////////////
Функция принимает объект запроса в качестве первого аргумента, имя шаблона в качестве второго аргумента, и словаря в качестве дополнительного третьего аргумента:
def home(request):
  context = {"name": "Spot"}
  return render(request, "vetoffice/home.html", context)
////////////////////////////////////////////////////////////////////////////

python3 manage.py migrate
/////////////////////////////
from django.views.generic import ....

from .models import Student
from django.views.generic import ListView

class StudentList(ListView):
  model = Student
  template_name = "schoolapp/student.html"
//////////////////////////////////
from .models import Student
from django.views.generic import ListView
from django.views.generic.edit import CreateView

class StudentCreate(CreateView):
  model = Student
  template_name = "schoolapp/student_create_form.html"
  fields = ["first_name", "last_name", "grade"]
  
///////////////////////////////////////

from django.shortcuts import render
from .models import Owner, Patient
from django.views.generic import ListView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
# Import the generic views below:


def home(request):
  context = {"name": "Djangoer"}
  return render(request, "vetoffice/home.html", context)

class OwnerList(ListView):
  model = Owner
  template_name = "vetoffice/owner_list.html"

class PatientList(ListView):
  model = Patient
  template_name = "vetoffice/patient_list.html"

# Create your other generic views below:
class OwnerCreate(CreateView):
  model = Owner
  template_name = "vetoffice/owner_create_form.html"
  fields = ["first_name", "last_name", "phone"]

class PatientCreate(CreateView):
  model = Patient
  template_name = "vetoffice/patient_create_form.html"
  fields = ["animal_type", "breed", "pet_name", "age", "owner"]

class OwnerUpdate(UpdateView):
  model = Owner
  template_name = "vetoffice/owner_update_form.html"
  fields = ["first_name", "last_name", "phone"]

class PatientUpdate(UpdateView):
  model = Patient
  template_name = "vetoffice/patient_update_form.html"
  fields = ["animal_type", "breed", "pet_name", "age", "owner"]

class OwnerDelete(DeleteView):
  model = Owner
  template_name = "vetoffice/owner_delete_form.html"

class PatientDelete(DeleteView):
  model = Patient
  template_name = "vetoffice/patient_delete_form.html"
/////////////////////////////////////////////////////////////
у представлений на основе классов есть .as_view()метод:

urlpatterns = [
  path("", views.home, name="home"),
  path("owner/list", views.OwnerList.as_view(), name="ownerlist"),
  path("patient/list", views.PatientList.as_view(), name="patientlist"),
  path("owner/create", views.OwnerCreate.as_view(), name="ownercreate"),
  path("patient/create", views.PatientCreate.as_view(), name="patientcreate"),
  path("owner/update/<pk>", views.OwnerUpdate.as_view(), name="ownerupdate"),
  path("patient/update/<pk>", views.PatientUpdate.as_view(), name="patientupdate"),
  path("owner/delete/<pk>", views.OwnerDelete.as_view(), name="ownerdelete"),
  path("patient/delete/<pk>", views.PatientDelete.as_view(), name="patientdelete"),
]


////////////////////////////////////////////////////////////////
{% extends "./base.html" %}

{% block content %}
<h2>Owner List</h2>
<table id="owners">
  <tr>
    <th>First</th>
    <th>Last</th>
    <th>Phone</th>
      <th> </th>
      <th> </th>
  </tr>
	<tr>
  {% for owner in owner_list %}
  </tr>
  <tr>
    <td>{{ owner.first_name }}</td>
    <td>{{ owner.last_name }}</td>
    <td>{{ owner.phone }}</td>
    <!-- Add your code below -->
    <td><a href="{% url 'ownerupdate' owner.id %}">Edit</a></td>
    <td><a href="{% url 'ownerdelete' owner.id %}">Delete</a></td>
  </tr>
  {% endfor %}
</table>
{% endblock %}


//////////////////////////////////
create forms:

<form action="" method="POST">
  {% csrf_token %} <---------- important
  <label name="LabelField" for="InputField">Owner Name:</label>
  <input name="InputField" id="InputField"/>
  <input value="Submit" type="submit"/>
</form>

And we have to add in views.py:

def OwnerCreate(request):

  if request.method == 'POST':
     newOwner = Owner()
     newOwner.first_name = request.POST["first_name"]
     newOwner.last_name = request.POST["last_name"]
     newOwner.phone_number = request.POST["phone_number"] 
     newOwner.save()
  return render(request, "vetoffice/owner_create_form.html")
  
if form.is_valid():
  form = form.save()
  
/////////////////////////////////
we have to create file forms.py in main file

what we need init

from django import forms
from .models import Owner

class OwnerCreateForm(forms.ModelForm):
  class Meta:
    model = Owner
    fields = ("first_name", "last_name", "phone")
  
  
 now in views.py
 
 class OwnerCreate(CreateView):
  model = Owner
  template_name = "vetoffice/owner_create_form.html"
  form_class = OwnerCreateForm
  
 in models.py, we have to return user to other page after form:
 def get_absolute_url(self):
    return 'list'
  
  
  
  
  
  
  
  
  
